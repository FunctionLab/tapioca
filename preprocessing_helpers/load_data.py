import pandas as pd
import os

def load_protein_data(f):

    '''
    
    Load data from file. Data should be in the following format:
    

    condition   |   infected    |   infected    |   infected    |   ... |   infected        |   uninfected  |   uninfected  |   uninfected  |   ... |   uninfected      |   ... |   condition(n)    |
    temperature |   37          |   40          |   44          |   ... |   temp(n)         |   37          |   40          |   44          |   ... |   temp(n)         |   ... |   temp(n)         |
    replicate   |   1           |   1           |   1           |   ... |   replicate(n)    |   1           |   1           |   1           |   ... |   replicate(n)    |   ... |   replicate(n)    |
    accession   |
    ----------- | ------------- | ------------- | ------------- | ----- | ----------------- | ------------- | ------------- | ------------- | ----- | ----------------- | ----- | ----------------- |
    acc1        |               |               |               |       |                   |               |               |               |       |                   |       |                   |
    acc2        |               |               |               |       |                   |               |               |               |       |                   |       |                   |
    acc3        |               |               |               |       |                   |               |               |               |       |                   |       |                   |
    .           |               |               |               |       |                   |               |               |               |       |                   |       |                   |
    .           |               |               |               |       |                   |               |               |               |       |                   |       |                   |
    .           |               |               |               |       |                   |               |               |               |       |                   |       |                   |
    acc(n)      |               |               |               |       |                   |               |               |               |       |                   |       |                   |
    
    Note that the order of the condition, temperature, and replicate headers no not matter.
    
    parameters:
        f: string file path for desired import file

    '''
        
    if os.path.exists(f):
        f_type = os.path.split(f)[-1].split('.')[-1]
        
        if f_type == '.xls' or f_type == 'xlsx':
    
            df = pd.read_excel(f, index_col=0, header = [0, 1, 2])
        
        else:
            if f_type == 'csv':
                df = pd.read_csv(f, index_col=0, sep=',', header = [0, 1, 2])
                
            elif f_type == 'txt':
                df = pd.read_csv(f, index_col=0, sep='\t', header = [0, 1, 2])
            
            else:
                raise ValueError('Incompatible file type')
                
        ensure_df_structure(df)
        ensure_no_duplicates(df)

        return df.stack(['condition', 'replicate'])

def ensure_df_structure(df):

    '''
    
    Ensure that the incoming dataframe is formatted appropriately
    
    parameters:
        df: pd.DataFrame generated by pd.read_csv
    
    '''

    if not all([i in df.columns.names for i in ['condition', 'temperature', 'replicate']]):
        raise ValueError('input data is not formatted correctly for analysis')
    
    elif df.index.names != ['accession']:
        raise ValueError('input data is not formatted correctly for analysis')

def ensure_no_duplicates(df):
    if df.index.duplicated().any():
        raise ValueError ('Your input file has duplicate row indicies (i.e. protein accessions). Please fix your input file and try again.')

    if df.columns.duplicated().any():
        raise ValueError ('Your input file has duplicate column indicies (i.e. combinations of condition, temperature, and replicate). Please fix your input file and try again.')


def load_existing_df(directory, df_type, filename = None):

    df_types = {

        'raw': {
            'index_col': [0, 1, 2], 
            'header': [0] 
            }, 

        'reference_normalized': {
            'index_col': [0, 1, 2], 
            'header': [0] 
            }, 

        'MOMy_normalized': {
            'index_col': [0, 1, 2], 
            'header': [0] 
            },

        'E': {
            'index_col': [0, 1, 2, 3], 
            'header': [0] 
            }, 

        'optimized_params': {
            'index_col': [0, 1], 
            'header': [0] 
            }, 

        'TED': {
            'index_col': [0, 1, 2, 3], 
            'header': [0]
            }, 

        'complex_E': {
            'index_col': [0, 1, 2], 
            'header': [0]
            }, 

        'complex_TED': {
            'index_col': [0, 1, 2], 
            'header': [0]
            }, 

        'dE': {
            'index_col': [0, 1, 2, 3], 
            'header': [0]
            }, 

        'dTm': {
            'index_col': [0, 1, 2], 
            'header': [0]
            },
        
    }

    if not df_type in df_types.keys():
        raise KeyError('Choose a valid dataframe type from {}'.format(list(df_types.keys())))

    else:
        if filename is None:
            filename = '{}.csv'.format(df_type)

        path = os.path.join(directory, filename)

        if os.path.exists:
            return pd.read_csv(path, **df_types[df_type]).squeeze()
        else:
            raise FileNotFoundError('{} file path does not exist'.format(path))
        